/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_conjgrad_h
#define _sf_conjgrad_h


#include "_solver.h"


void sf_conjgrad_init(int np1     /* preconditioned size */, 
		      int nx1     /* model size */, 
		      int nd1     /* data size */, 
		      int nr1     /* residual size */, 
		      float eps1  /* scaling */,
		      float tol1  /* tolerance */, 
		      bool verb1  /* verbosity flag */, 
		      bool hasp01 /* if has initial model */);
/*< solver constructor >*/


void sf_conjgrad_close(void);
/*< Free allocated space >*/


void sf_conjgrad(sf_operator prec  /* data preconditioning */, 
		 sf_operator oper  /* linear operator */, 
		 sf_operator shape /* shaping operator */, 
		 float* p          /* preconditioned model */, 
		 float* x          /* estimated model */, 
		 float* dat        /* data */, 
		 int niter         /* number of iterations */);
/*< Conjugate gradient solver with shaping >*/


void sf_conjgrad_adj(bool adj /* adjoint flag */,
		     sf_operator oper  /* linear operator */, 
		     sf_operator shape /* shaping operator */, 
		     float* p          /* preconditioned model */, 
		     float* x          /* estimated model */, 
		     float* dat        /* data */, 
		     int niter         /* number of iterations */);
/*< Conjugate gradient solver with shaping and its adjoint. >*/

#endif
